package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    JoinPredicate preHolder;
    DbIterator[] holder;
    Tuple hold;
    int nullCounter;
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        preHolder=p;
        holder=new DbIterator[2];
        holder[0]=child1;
        holder[1]=child2;


    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return preHolder;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        String result="";
        TupleDesc td=holder[0].getTupleDesc();
        int bound=td.numFields();
        for(int i=0;i<bound;i++){
            result+=td.getFieldName(i);
        }
        return result;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
          String result="";
        TupleDesc td=holder[1].getTupleDesc();
        int bound=td.numFields();
        for(int i=0;i<bound;i++){
            result+=td.getFieldName(i);
        }
        return result;

    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return simpledb.TupleDesc.merge(holder[0].getTupleDesc(),holder[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        holder[0].open();
        holder[1].open();
        hold=null;
        super.open();
        nullCounter=0;
    }

    public void close() {
        // some code goes here
        holder[0].close();
        holder[1].close();
        super.close();

    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        holder[0].rewind();
        holder[1].rewind();
        hold=null;
        nullCounter=0;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        Tuple x=hold;
        if(x==null && holder[0].hasNext()){
                x=holder[0].next();
                holder[1].rewind();
        }
        if(x==null && !holder[0].hasNext()){
            return null;
        }

        while(nullCounter<1){
            while(holder[1].hasNext()){
                Tuple y=holder[1].next();
                if(preHolder.filter(x,y)){
                    Tuple result= new Tuple(getTupleDesc());
                    int bound=getTupleDesc().numFields();
                    int first=x.getTupleDesc().numFields();
                    int second=y.getTupleDesc().numFields();
                    for(int i=0;i<bound;i++){
                        if(i<first){
                            result.setField(i,x.getField(i));
                        } else {
                            result.setField(i,y.getField(i-first));
                        }
                    }
                    hold=x;
                    return result;
                }
            }
            holder[1].rewind();
            if(holder[0].hasNext()){
                x=holder[0].next();
                hold=x;
            } else {
                nullCounter++;
            }
        }
        hold=null;
        return null;                
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return holder;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        holder[0]=children[0];
        holder[1]=children[1];
    }

}
